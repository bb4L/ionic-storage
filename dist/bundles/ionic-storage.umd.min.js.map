{"version":3,"sources":["ng://@ionic/storage/webdriver.ts","ng://@ionic/storage/storage.ts","ng://@ionic/storage/index.ts"],"names":["webdriver","_driver","_initStorage","Promise","resolve","clear","callback","reject","chrome","storage","local","res","getItem","key","get","iterate","iteratee","forEach","i","keyIndex","sol","keys","length","removeItem","remove","setItem","value","set","Storage","config","_this","this","_dbPromise","db","defaultConfig","name","storeName","dbKey","driverOrder","actualConfig","Object","assign","LocalForage.defineDriver","chromeExtensionDriver","then","LocalForage.createInstance","setDriver","_getDriverOrder","driver","catch","reason","defineProperty","prototype","ready","map","CordovaSQLiteDriver._driver","LocalForage.INDEXEDDB","LocalForage.WEBSQL","LocalForage.LOCALSTORAGE","iteratorCallback","StorageConfigToken","InjectionToken","provideStorage","storageConfig","IonicStorageModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule"],"mappings":"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","sourcesContent":["declare let chrome: any;\r\nconst webdriver: LocalForageDriver = {\r\n        _driver: \"webExtensionLocalStorage\",\r\n        _initStorage(): Promise<void> {\r\n            return Promise.resolve();\r\n        },\r\n        clear(callback ?: (err: any) => void): Promise<void> {\r\n            return new Promise((resolve, reject) => {\r\n                chrome.storage.local.clear(res => {\r\n                    if (callback) {\r\n                        callback(res);\r\n                    }\r\n                    resolve(res);\r\n                });\r\n            });\r\n        },\r\n        getItem<T>(key: string, callback?: (err: any, value: T) => void): Promise<T> {\r\n            return new Promise((resolve, reject) => {\r\n                chrome.storage.local.get(key, res => {\r\n                    if (callback) {\r\n                        callback(null, res);\r\n                    }\r\n                    resolve(res);\r\n                });\r\n            });\r\n\r\n        },\r\n        iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U, callback?: (err: any, result: U) => void): Promise<U> {\r\n            return new Promise((resolve, reject) => {\r\n                chrome.storage.local.get(null, res => {\r\n                    res.forEach((key, i) => iteratee(res[key], key, i));\r\n                    if (callback) {\r\n                        callback(null, res);\r\n                    }\r\n                    resolve(res);\r\n                });\r\n            });\r\n\r\n        },\r\n\r\n        key(keyIndex: number, callback?: (err: any, key: string) => void): Promise<string> {\r\n            return new Promise((resolve, reject) => {\r\n                chrome.storage.local.get(null, res => {\r\n                    let sol:string = res.keys()[keyIndex];\r\n                    if (callback) {\r\n                        callback(null, sol);\r\n                    }\r\n                    resolve(res);\r\n                });\r\n            });\r\n        },\r\n        keys(callback ?: (err: any, keys: string[]) => void): Promise<string[]> {\r\n            return new Promise(\r\n                (resolve, reject) => {\r\n                    chrome.storage.local.get(null, res => {\r\n                        if (callback) {\r\n                            callback(null, res);\r\n                        }\r\n                        resolve(res);\r\n                    });\r\n                }\r\n            );\r\n        },\r\n        length(callback ?: (err: any, numberOfKeys: number) => void): Promise<number> {\r\n            return new Promise(\r\n                (resolve, reject) => {\r\n                    chrome.storage.local.get(null, res => {\r\n                        if (callback) {\r\n                            callback(null, res.keys.length);\r\n                        }\r\n                        resolve(res.keys.length);\r\n                    });\r\n                }\r\n            );\r\n        },\r\n        removeItem(key: string, callback ?: (err: any) => void): Promise<void> {\r\n            return new Promise(\r\n                (resolve, reject) => {\r\n                    chrome.storage.local.remove(key, res => {\r\n                        if (callback) {\r\n                            callback(res);\r\n                        }\r\n                        resolve(res);\r\n                    });\r\n                }\r\n            );\r\n        },\r\n        setItem<T>(key: string, value: T, callback?: (err: any, value: T) => void): Promise<T> {\r\n            return new Promise(\r\n                (resolve, reject) => {\r\n                    chrome.storage.local.set({key: value}, res => {\r\n                        if (callback) {\r\n                            callback(null, res);\r\n                        }\r\n                        resolve(res);\r\n                    });\r\n                }\r\n            );\r\n        }\r\n}\r\n;\r\n\r\nexport default webdriver;\r\n// add the driver to localForage.\r\n// localforage.defineDriver(myCustomDriver);","import { InjectionToken } from '@angular/core';\r\n\r\nimport * as LocalForage from 'localforage';\r\n\r\nimport * as CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\r\n\r\nimport chromeExtensionDriver from './webdriver';\r\n/**\r\n * Storage is an easy way to store key/value pairs and JSON objects.\r\n * Storage uses a variety of storage engines underneath, picking the best one available\r\n * depending on the platform.\r\n *\r\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\r\n * the most stable and widely used file-based databases, and avoids some of the\r\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\r\n * data in low disk-space situations.\r\n *\r\n * When running in the web or as a Progressive Web App, Storage will attempt to use\r\n * IndexedDB, WebSQL, and localstorage, in that order.\r\n *\r\n * @usage\r\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\r\n * ```bash\r\n * ionic cordova plugin add cordova-sqlite-storage\r\n * ```\r\n *\r\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\r\n * ```bash\r\n * npm install --save @ionic/storage\r\n * ```\r\n *\r\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\r\n *\r\n * ```typescript\r\n * import { IonicStorageModule } from '@ionic/storage';\r\n *\r\n * @NgModule({\r\n *   declarations: [\r\n *     // ...\r\n *   ],\r\n *   imports: [\r\n *     BrowserModule,\r\n *     IonicModule.forRoot(MyApp),\r\n *     IonicStorageModule.forRoot()\r\n *   ],\r\n *   bootstrap: [IonicApp],\r\n *   entryComponents: [\r\n *     // ...\r\n *   ],\r\n *   providers: [\r\n *     // ...\r\n *   ]\r\n * })\r\n * export class AppModule {}\r\n *```\r\n *\r\n * Finally, inject it into any of your components or pages:\r\n * ```typescript\r\n * import { Storage } from '@ionic/storage';\r\n\r\n * export class MyApp {\r\n *   constructor(private storage: Storage) { }\r\n *\r\n *   ...\r\n *\r\n *   // set a key/value\r\n *   storage.set('name', 'Max');\r\n *\r\n *   // Or to get a key/value pair\r\n *   storage.get('age').then((val) => {\r\n *     console.log('Your age is', val);\r\n *   });\r\n * }\r\n * ```\r\n *\r\n *\r\n * ### Configuring Storage\r\n *\r\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\r\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\r\n *\r\n * Note: Any custom configurations will be merged with the default configuration\r\n *\r\n * ```typescript\r\n * import { IonicStorageModule } from '@ionic/storage';\r\n *\r\n * @NgModule({\r\n *   declarations: [...],\r\n *   imports: [\r\n *     IonicStorageModule.forRoot({\r\n *       name: '__mydb',\r\n         driverOrder: ['indexeddb', 'sqlite', 'websql']\r\n *     })\r\n *   ],\r\n *   bootstrap: [...],\r\n *   entryComponents: [...],\r\n *    providers: [...]\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n */\r\nexport class Storage {\r\n  private _dbPromise: Promise<LocalForage>;\r\n  private _driver: string = null;\r\n\r\n  /**\r\n   * Create a new Storage instance using the order of drivers and any additional config\r\n   * options to pass to LocalForage.\r\n   *\r\n   * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\r\n   * default is that exact ordering.\r\n   */\r\n  constructor(config: StorageConfig) {\r\n    this._dbPromise = new Promise((resolve, reject) => {\r\n      let db: LocalForage;\r\n\r\n      const defaultConfig = getDefaultConfig();\r\n      const actualConfig = Object.assign(defaultConfig, config || {});\r\n\r\n      LocalForage.defineDriver(chromeExtensionDriver)\r\n        .then(() => {\r\n          db = LocalForage.createInstance(actualConfig);\r\n        })\r\n        .then(() =>\r\n          db.setDriver(this._getDriverOrder(actualConfig.driverOrder))\r\n        )\r\n        .then(() => {\r\n          this._driver = db.driver();\r\n          resolve(db);\r\n        })\r\n        .catch(reason => reject(reason));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the name of the driver being used.\r\n   * @returns Name of the driver\r\n   */\r\n  get driver(): string | null {\r\n    return this._driver;\r\n  }\r\n\r\n  /**\r\n   * Reflect the readiness of the store.\r\n   * @returns Returns a promise that resolves when the store is ready\r\n   */\r\n  ready(): Promise<LocalForage> {\r\n    return this._dbPromise;\r\n  }\r\n\r\n  /** @hidden */\r\n  private _getDriverOrder(driverOrder) {\r\n    return driverOrder.map(driver => {\r\n      switch (driver) {\r\n        case 'sqlite':\r\n          return CordovaSQLiteDriver._driver;\r\n        case 'indexeddb':\r\n          return LocalForage.INDEXEDDB;\r\n        case 'websql':\r\n          return LocalForage.WEBSQL;\r\n        case 'localstorage':\r\n          return LocalForage.LOCALSTORAGE;\r\n        case \"webExtensionLocalStorage\":\r\n          return chromeExtensionDriver._driver;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the value associated with the given key.\r\n   * @param key the key to identify this value\r\n   * @returns Returns a promise with the value of the given key\r\n   */\r\n  get(key: string): Promise<any> {\r\n    return this._dbPromise.then(db => db.getItem(key));\r\n  }\r\n\r\n  /**\r\n   * Set the value for the given key.\r\n   * @param key the key to identify this value\r\n   * @param value the value for this key\r\n   * @returns Returns a promise that resolves when the key and value are set\r\n   */\r\n  set(key: string, value: any): Promise<any> {\r\n    return this._dbPromise.then(db => db.setItem(key, value));\r\n  }\r\n\r\n  /**\r\n   * Remove any value associated with this key.\r\n   * @param key the key to identify this value\r\n   * @returns Returns a promise that resolves when the value is removed\r\n   */\r\n  remove(key: string): Promise<any> {\r\n    return this._dbPromise.then(db => db.removeItem(key));\r\n  }\r\n\r\n  /**\r\n   * Clear the entire key value store. WARNING: HOT!\r\n   * @returns Returns a promise that resolves when the store is cleared\r\n   */\r\n  clear(): Promise<void> {\r\n    return this._dbPromise.then(db => db.clear());\r\n  }\r\n\r\n  /**\r\n   * @returns Returns a promise that resolves with the number of keys stored.\r\n   */\r\n  length(): Promise<number> {\r\n    return this._dbPromise.then(db => db.length());\r\n  }\r\n\r\n  /**\r\n   * @returns Returns a promise that resolves with the keys in the store.\r\n   */\r\n  keys(): Promise<string[]> {\r\n    return this._dbPromise.then(db => db.keys());\r\n  }\r\n\r\n  /**\r\n   * Iterate through each key,value pair.\r\n   * @param iteratorCallback a callback of the form (value, key, iterationNumber)\r\n   * @returns Returns a promise that resolves when the iteration has finished.\r\n   */\r\n  forEach(\r\n    iteratorCallback: (value: any, key: string, iterationNumber: Number) => any\r\n  ): Promise<void> {\r\n    return this._dbPromise.then(db => db.iterate(iteratorCallback));\r\n  }\r\n}\r\n\r\n/** @hidden */\r\nexport function getDefaultConfig() {\r\n  return {\r\n    name: '_ionicstorage',\r\n    storeName: '_ionickv',\r\n    dbKey: '_ionickey',\r\n    driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage']\r\n  };\r\n}\r\n\r\n/** @hidden */\r\nexport interface StorageConfig {\r\n  name?: string;\r\n  version?: number;\r\n  size?: number;\r\n  storeName?: string;\r\n  description?: string;\r\n  driverOrder?: string[];\r\n  dbKey?: string;\r\n}\r\n\r\n/** @hidden */\r\nexport const StorageConfigToken = new InjectionToken<any>(\r\n  'STORAGE_CONFIG_TOKEN'\r\n);\r\n\r\n/** @hidden */\r\nexport function provideStorage(storageConfig: StorageConfig): Storage {\r\n  const config = !!storageConfig ? storageConfig : getDefaultConfig();\r\n  return new Storage(config);\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport {\r\n  getDefaultConfig,\r\n  provideStorage,\r\n  Storage,\r\n  StorageConfig,\r\n  StorageConfigToken\r\n} from './storage';\r\n\r\nexport { StorageConfig, StorageConfigToken, Storage };\r\n\r\n@NgModule()\r\nexport class IonicStorageModule {\r\n  static forRoot(storageConfig: StorageConfig = null): ModuleWithProviders {\r\n    return {\r\n      ngModule: IonicStorageModule,\r\n      providers: [\r\n        { provide: StorageConfigToken, useValue: storageConfig },\r\n        {\r\n          provide: Storage,\r\n          useFactory: provideStorage,\r\n          deps: [StorageConfigToken]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}